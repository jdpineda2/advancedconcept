name: Android CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Setup Gradle Cache
      uses: gradle/actions/setup-gradle@v3
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
    - name: Build devRelease APK
      run: ./gradlew assembleDevRelease
      # --- New Step: Create credentials file from secret ---
    - name: Create Firebase Service Account File
      # Create a temporary file in the runner's temp directory
      # Use single quotes around the secret to handle JSON content correctly
      run: echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_JSON }}' > $RUNNER_TEMP/google-credentials.json
      # Ensure the secret FIREBASE_SERVICE_ACCOUNT_KEY_JSON contains the full JSON content

    - name: Upload devRelease APK to Firebase App Distribution
      run: ./gradlew appDistributionUploadDevRelease
      env:
        # --- Corrected Env Var ---
        # Point GOOGLE_APPLICATION_CREDENTIALS to the file created above
        GOOGLE_APPLICATION_CREDENTIALS: $RUNNER_TEMP/google-credentials.json
        # Use the GitHub secret for authentication
        #FIREBASE_APP_DISTRO_TOKEN: ${{ secrets.FIREBASE_APP_DISTRO_TOKEN }}
        # You might need to set FIREBASE_APP_ID if autodetection fails,
        # find it in your google-services.json or Firebase project settings
        FIREBASE_APP_ID: "1:775510601297:android:564c49a5454afd3a609270"
        # You can also override release notes here if needed :
        # APP_DISTRIBUTION_RELEASE_NOTES: "CI Build: ${{ github.sha }}"
        # Required: Provide the service account key JSON content directly from secrets
        #serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_JSON }}
